From 120d8b957394b83dbafb934d4b0e64a967e924a5 Mon Sep 17 00:00:00 2001
From: Michael Zimmermann <michael.zimmermann@grandcentrix.net>
Date: Thu, 21 Jun 2018 13:18:01 +0200
Subject: [PATCH] mDNSCore: fix switch fallthrough warnings

---
 mDNSCore/DNSCommon.c |  4 +++-
 mDNSCore/DNSDigest.c | 17 ++++++++++-------
 mDNSCore/uDNS.c      |  3 ++-
 3 files changed, 15 insertions(+), 9 deletions(-)

diff --git a/mDNSCore/DNSCommon.c b/mDNSCore/DNSCommon.c
index be8e106..29b7280 100644
--- a/mDNSCore/DNSCommon.c
+++ b/mDNSCore/DNSCommon.c
@@ -1532,8 +1532,8 @@ mDNSexport mDNSu32 RDataHashValue(const ResourceRecord *const rr)
         sum = DomainNameHashValue((domainname *)rdb->data);
         ptr += dlen;
         len -= dlen;
-        /* FALLTHROUGH */
     }
+    /* fallthrough */
 
     default:
     {
@@ -4202,6 +4202,7 @@ decimal:    if (!F.havePrecision)
 
             case 'p':  F.havePrecision = F.lSize = 1;
                 F.precision = sizeof(void*) * 2;                // 8 characters on 32-bit; 16 characters on 64-bit
+                /* fallthrough */
             case 'X':  digits = "0123456789ABCDEF";
                 goto hexadecimal;
             case 'x':  digits = "0123456789abcdef";
@@ -4295,6 +4296,7 @@ hexadecimal: if (F.lSize) n = va_arg(arg, unsigned long);
 
             default:    s = mDNS_VACB;
                 i = mDNS_snprintf(mDNS_VACB, sizeof(mDNS_VACB), "<<UNKNOWN FORMAT CONVERSION CODE %%%c>>", c);
+                /* fallthrough */
 
             case '%':  *sbuffer++ = (char)c;
                 if (++nwritten >= buflen) goto exit;
diff --git a/mDNSCore/DNSDigest.c b/mDNSCore/DNSDigest.c
index 57a4012..354e2b5 100644
--- a/mDNSCore/DNSDigest.c
+++ b/mDNSCore/DNSDigest.c
@@ -608,26 +608,29 @@ void md5_block_data_order (MD5_CTX *c, const void *p,int num);
                          l)
 #define HOST_p_c2l(c,l,n)   {                   \
         switch (n) {                    \
-        case 0: l =((unsigned long)(*((c)++)));     \
-        case 1: l|=((unsigned long)(*((c)++)))<< 8; \
-        case 2: l|=((unsigned long)(*((c)++)))<<16; \
-        case 3: l|=((unsigned long)(*((c)++)))<<24; \
+        case 0: l =((unsigned long)(*((c)++)));     /* fallthrough */ \
+        case 1: l|=((unsigned long)(*((c)++)))<< 8; /* fallthrough */ \
+        case 2: l|=((unsigned long)(*((c)++)))<<16; /* fallthrough */ \
+        case 3: l|=((unsigned long)(*((c)++)))<<24; /* fallthrough */ \
         } }
 #define HOST_p_c2l_p(c,l,sc,len) {                  \
         switch (sc) {                   \
         case 0: l =((unsigned long)(*((c)++)));     \
             if (--len == 0) break;                                                 \
+            /* fallthrough */                       \
         case 1: l|=((unsigned long)(*((c)++)))<< 8; \
             if (--len == 0) break;                                                 \
+            /* fallthrough */                       \
         case 2: l|=((unsigned long)(*((c)++)))<<16; \
+            /* fallthrough */                       \
         } }
 /* NOTE the pointer is not incremented at the end of this */
 #define HOST_c2l_p(c,l,n)   {                   \
         l=0; (c)+=n;                    \
         switch (n) {                    \
-        case 3: l =((unsigned long)(*(--(c))))<<16; \
-        case 2: l|=((unsigned long)(*(--(c))))<< 8; \
-        case 1: l|=((unsigned long)(*(--(c))));     \
+        case 3: l =((unsigned long)(*(--(c))))<<16; /* fallthrough */ \
+        case 2: l|=((unsigned long)(*(--(c))))<< 8; /* fallthrough */ \
+        case 1: l|=((unsigned long)(*(--(c))));     /* fallthrough */ \
         } }
 #define _HOST_l2c(l,c)  (*((c)++)=(unsigned char)(((l)    )&0xff),  \
                          *((c)++)=(unsigned char)(((l)>> 8)&0xff),  \
diff --git a/mDNSCore/uDNS.c b/mDNSCore/uDNS.c
index 4d01142..596b944 100755
--- a/mDNSCore/uDNS.c
+++ b/mDNSCore/uDNS.c
@@ -2319,7 +2319,8 @@ mDNSlocal void UpdateOneSRVRecord(mDNS *m, AuthRecord *rr)
 
     case regState_NATError:
         if (!NATChanged) return;
-    // if nat changed, register if we have a target (below)
+        // if nat changed, register if we have a target (below)
+        /* fallthrough */
 
     case regState_NoTarget:
         if (!newtarget->c[0])
-- 
2.19.2

